/*
 * generated by Xtext 2.12.0
 */
package org.softlang.qegal.lang.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.Assignment
import org.softlang.qegal.lang.qegal.URILocal
import org.eclipse.xtext.EcoreUtil2
import org.softlang.qegal.lang.qegal.Variable
import org.softlang.qegal.lang.qegal.Rule

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class QegalProposalProvider extends AbstractQegalProposalProvider {

	override completeURILocal_Name(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeURILocal_Name(model, assignment, context, acceptor);

		val uriLocal = model as URILocal
		val root = EcoreUtil2.getRootContainer(uriLocal)
		for (scopeUriLocal : EcoreUtil2.getAllContentsOfType(root, URILocal))
			if (uriLocal.prefix == scopeUriLocal.prefix)
				acceptor.accept(createCompletionProposal(scopeUriLocal.name, context))

	}

	override completeVariable_Name(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeURILocal_Name(model, assignment, context, acceptor);

		val root = EcoreUtil2.getContainerOfType(model, Rule)
		for (scopeVariable : EcoreUtil2.getAllContentsOfType(root, Variable))
			acceptor.accept(createCompletionProposal(scopeVariable.name, context))
	}
}
