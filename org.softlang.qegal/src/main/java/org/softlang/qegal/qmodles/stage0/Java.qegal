import org.softlang.qegal.buildins.decompose.*
import org.softlang.qegal.buildins.*
import org.softlang.qegal.buildins.string.*
import org.apache.jena.reasoner.rulesys.builtins.*

/* Default softlang namespace */
@prefix sl: <http://org.softlang.com/>.

@prefix env: <http://org.softlang.com/env/>.

// #### AST Creation #############################################################################################
// # Create Java Classes AST.
(?jfile, sl:manifestsAs, sl:File) Extension(?jfile, "java") -> (?jfile, sl:elementOf, sl:Java).

(?mod, sl:elementOf, sl:Java) StrPropertyJava(?mod,"type[1]/isInterface",?name) -> (?mod,sl:isinterface,?name).
 (?file, sl:elementOf, sl:Java) StrJava(?file,"type[1]",?str) -> (?file, env:content, ?str).
 
// # Create Packages AST (if it contains one Java file).
(?package, sl:manifestsAs, sl:Folder) (?jfile, sl:partOf, ?package) (?jfile, sl:elementOf, sl:Java) -> (?package, sl:elementOf, sl:PackageJava).

// # Create Java Methods and Fields AST.
(?class, sl:elementOf, sl:Java) -> 
	DecJava(?class, "type[1]/members", sl:partOf, ?class) 
	DecJava(?class,"type[1]/members", sl:elementOf, sl:MemberJava).

(?member, sl:elementOf,sl:MemberJava) ClassJava(?member,"","com.github.javaparser.ast.body.MethodDeclaration") -> (?member,sl:elementOf,sl:MethodJava).
(?member, sl:elementOf,sl:MemberJava) ClassJava(?member,"","com.github.javaparser.ast.body.FieldDeclaration") -> (?member,sl:elementOf,sl:FieldJava).

(?file, sl:elementOf, sl:MethodJava) StrJava(?file,"",?str) -> (?file, env:content, ?str).
(?file, sl:elementOf, sl:FieldJava) StrJava(?file,"",?str) -> (?file, env:content, ?str).
 
// # Create Java extended and implemented types AST.
(?class, sl:elementOf, sl:Java) -> 
	DecJava(?class,"type[1]/extendedTypes", sl:partOf, ?class) 
	DecJava(?class,"type[1]/extendedTypes", sl:elementOf, sl:ExtendedTypeJava).
(?class, sl:elementOf, sl:Java) -> 
	DecJava(?class,"type[1]/implementedTypes", sl:partOf, ?class) 
	DecJava(?class,"type[1]/implementedTypes", sl:elementOf, sl:ImplementedTypeJava).
	
// # Create Java Imports AST.
(?class, sl:elementOf, sl:Java) -> 
	DecJava(?class,"imports", sl:partOf, ?class) 
	DecJava(?class,"imports", sl:elementOf, sl:ImportJava).
	


// #### AST (qualified) naming #############################################################################################

// # Naming the package (Qualified).
(?package, sl:elementOf, sl:PackageJava) (?jfile, sl:elementOf, sl:Java) 
	(?jfile,sl:partOf, ?package) StrJava(?jfile, "packageDeclaration/value/name", ?qname)  -> 
		(?package, env:qname, ?qname).
		
// # Naming the class (Simple).
(?jfile, sl:elementOf, sl:Java) StrJava(?jfile, "type[1]/name", ?name) -> (?jfile, env:sname, ?name).

// # Naming the members (Simple).
(?member, sl:elementOf,sl:MethodJava) 	StrJava(?member, "/name", ?name) -> 			(?member,env:sname,?name).
(?member, sl:elementOf,sl:FieldJava) 	StrJava(?member, "/variables/name", ?name) ->	(?member,env:sname,?name).

// # Name inheritance Class, Method and Field.
(?low, sl:elementOf,sl:Java)  (?top, sl:elementOf, sl:PackageJava) (?low, sl:partOf, ?top) 
	(?top, env:qname,?qname) (?low, env:sname,?sname) StrConcat(?qname,".",?sname,?name) ->  (?low, env:qname,?name).
	
(?low, sl:elementOf,sl:MemberJava)  (?top, sl:elementOf, sl:Java) (?low, sl:partOf, ?top) 
	(?top, env:qname,?qname) (?low, env:sname,?sname) StrConcat(?qname,".",?sname,?name) ->  (?low, env:qname,?name).

// #### Scopes #############################################################################################

// Self in 'e' scope
(?package, sl:elementOf,sl:PackageJava)->  (?package, env:escope, ?package).
(?jfile, sl:elementOf, sl:Java) ->  (?jfile, env:escope, ?jfile).

(?package, sl:elementOf,sl:PackageJava)->  (?package, env:inscope, ?package).
(?jfile, sl:elementOf, sl:Java) ->  (?jfile, env:inscope, ?jfile).
//(?member, sl:elementOf,sl:MemberJava) ->  (?member, env:escope, ?member).

// # Specific 'in' scope rules.
(?jfile, sl:elementOf, sl:Java) (?package, sl:elementOf,sl:PackageJava)   (?jfile, sl:partOf, ?package) -> (?jfile, env:inscope, ?package).
//(?member, sl:elementOf,sl:MemberJava)  (?jfile, sl:elementOf, sl:Java) (?member, sl:partOf, ?jfile) ->  (?member, env:inscope, ?jfile).

// # Specific 'use' scope rules (now with extend and implement type node).
(?jfile, sl:elementOf, sl:Java) (?package, sl:elementOf,sl:PackageJava)   (?jfile, sl:partOf, ?package) -> (?jfile, env:usescope, ?package).
(?jfile, sl:elementOf, sl:Java) (?implements, sl:elementOf,sl:ImplementedTypeJava)   (?implements, sl:partOf, ?jfile) -> (?implements, env:usescope, ?jfile).
(?jfile, sl:elementOf, sl:Java) (?extends, sl:elementOf,sl:ExtendedTypeJava)   (?extends, sl:partOf, ?jfile) -> (?extends, env:usescope, ?jfile).
//(?member, sl:elementOf,sl:MemberJava)  (?jfile, sl:elementOf, sl:Java) (?member, sl:partOf, ?jfile) ->  (?member, env:usescope, ?jfile).

// # Propagation of 'e', 'in' and 'use' scope.
(?x, env:inscope, ?y) (?y, env:inscope, ?z) -> (?x, env:inscope, ?z).
(?x, env:usescope, ?y) (?y, env:usescope, ?z) -> (?x, env:usescope, ?z).
(?x, env:usescope, ?y) (?y, env:escope, ?z) -> (?x, env:escope, ?z).

// # Import 'e' scope by qualified name.
(?import,sl:partOf,?jfile) (?import, sl:elementOf, sl:ImportJava) StrJava(?import, "/name", ?qimport) (?rimport,env:qname,?qimport) ->
	(?jfile,env:escope,?rimport). 

// #### Type Resolution #############################################################################################

// # Search something in the scope that is named according to the sname.
(?implements, sl:partOf, ?jfile) (?jfile,sl:elementOf,sl:Java)
	(?implements, sl:elementOf,sl:ImplementedTypeJava) StrJava(?implements, "/name", ?sname) (?implements,env:escope,?scope) 
	(?reference, env:inscope, ?scope) (?reference,env:sname,?sname) (?reference, sl:elementOf, sl:Java)
	-> (?jfile,sl:implement,?reference).
		
(?implements, sl:partOf, ?jfile) (?jfile,sl:elementOf,sl:Java)
	(?implements, sl:elementOf,sl:ExtendedTypeJava) StrJava(?implements, "/name", ?sname) (?implements,env:escope,?scope) 
	(?reference, env:inscope, ?scope) (?reference,env:sname,?sname) (?reference, sl:elementOf, sl:Java)
	-> (?jfile,sl:extend,?reference).