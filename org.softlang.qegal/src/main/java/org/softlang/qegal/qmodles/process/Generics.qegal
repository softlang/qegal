import org.softlang.qegal.buildins.decompose.*
import org.softlang.qegal.buildins.*
import org.softlang.qegal.buildins.string.*
import org.apache.jena.reasoner.rulesys.builtins.*

/* Default softlang namespace */
@prefix sl: <http://org.softlang.com/>.

// Java files by extension.
(?x, sl:manifestsAs, sl:File) Extension(?x, "java") -> (?x, sl:elementOf, sl:Java).

// Subtyping JDT (TODO: Check multiple extensions).
(?class, sl:elementOf, sl:Java)
	StrJava(?class, "type[1]/extendedTypes[1]/name", ?superclass) ->
		(?class, sl:refersToExtendedTypes, ?superclass).

(?class, sl:elementOf, sl:Java)
	StrJava(?class, "type[1]/implementedTypes[1]/name", ?interface) ->
		(?class, sl:refersToImplementedTypes, ?interface).

// Simple decompositions of Java files.
(?class, sl:elementOf, sl:Java) ->
		DecJava(?class, "type[1]/members", sl:partOf,?class)
		DecJava(?class,"type[1]/members", sl:elementOf, sl:MemberJava).
	
	
(?member, sl:elementOf,sl:MemberJava) 
	ClassJava(?member,"","com.github.javaparser.ast.body.MethodDeclaration") ->
		(?member,sl:elementOf,sl:MethodJava).
		
(?member, sl:elementOf,sl:MemberJava) 
	ClassJava(?member,"","com.github.javaparser.ast.body.FieldDeclaration") ->
		(?member,sl:elementOf,sl:AttributeJava).
			

(?member, sl:elementOf,sl:MethodJava) 
	StrJava(?member, "/name", ?name) ->
		(?member,sl:name,?name).
		
(?member, sl:elementOf,sl:AttributeJava) 
	StrJava(?member, "/variables/name", ?name) ->
		(?member,sl:name,?name).
	
	
			
// Resolving by simple names within project.
(?source, sl:refersToImplementedTypes, ?alias)
	(?cls,sl:elementOf,sl:Java)
	StrJava(?cls, "type[1]/name", ?alias) ->
		(?source, sl:refersToImplementedTypes, ?cls).
		
// Resolving by simple names within project.
(?source, sl:refersToExtendedTypes, ?alias)
	(?cls,sl:elementOf,sl:Java)
	StrJava(?cls, "type[1]/name", ?alias) ->
		(?source, sl:refersToExtendedTypes, ?cls).

			
////not yet working
//[attributeJava: (?class, sl:elementOf, sl:Java)
//	StrJava(?class, "type[1]/members/variables", ?att)
//	->
//	(?att, sl:partOf, ?class) (?att, sl:elementOf, sl:AttributeJava)
//]